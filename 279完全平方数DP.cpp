//class Solution {
//public:
//    int numSquares(int n) {
//        vector<int> dp(n + 1, INT_MAX);
//        dp[0] = 0; // 0 需要 0 个完全平方数
//
//        for (int i = 1; i <= n; i++) {
//            for (int j = 1; j * j <= i; j++) {  // 遍历所有可能的平方数
//                dp[i] = min(dp[i], dp[i - j * j] + 1);
//            }
//        }
//        return dp[n];
//    }
//};
///*
//以 12 为例，我们计算 dp[12] 时，可以尝试：
//  - 12 = 1^2 + 11, 即 dp[12] = 1 + dp[11]
//  - 12 = 2^2 + 8,  即 dp[12] = 1 + dp[8]
//  - 12 = 3^2 + 3,  即 dp[12] = 1 + dp[3]
//
//其核心原理是：
//  - `12` 可以被拆分成一个完全平方数 `j^2` 加上一个更小的数 `12 - j^2`
//  - 这个更小的数 `12 - j^2` 在之前的计算中 **已经求得最优解**，即 `dp[12 - j^2]`
//  - 由于 `j^2` **算作一次操作**，所以状态转移方程为：
//    dp[i] = min(1 + dp[i - j^2])  （其中 j^2 ≤ i）
//
//我们遍历所有可能的 j，并选择使 `dp[i]` **最小的方案** 作为最终答案
//完全背包问题，给了1,4,9...j这些面额的硬币，问价格为i的商品最少需要几枚硬币
//*/